"use client";

import { useEffect, useState } from "react";
import { toast } from "sonner";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";

export default function SecurityPage() {
  const [hasApiToken, setHasApiToken] = useState<boolean>(false);
  const [revealedToken, setRevealedToken] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    checkApiToken();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ API-—Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
  const checkApiToken = async () => {
    try {
      setLoading(true);
      const res = await fetch("http://localhost:8080/api/v1/token", {
        credentials: "include",
      });
      if (res.ok) {
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç 200 OK, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω (–Ω–æ –º—ã –Ω–µ —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
        setHasApiToken(true);
      } else {
        // –ù–∞–ø—Ä–∏–º–µ—Ä, 404 = "No API token found"
        setHasApiToken(false);
      }
    } catch (err) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API-—Ç–æ–∫–µ–Ω–∞");
    } finally {
      setLoading(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ API-—Ç–æ–∫–µ–Ω–∞
  const handleGenerateToken = async () => {
    try {
      setLoading(true);
      const res = await fetch("http://localhost:8080/api/v1/token/generate_api", {
        method: "POST",
        credentials: "include",
      });
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞");

      // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { "api_token": "eyJhbGc..." }, –Ω–æ –º—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É—Ç
      await res.json();

      toast.success("API-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
      setHasApiToken(true);
      setRevealedToken(null); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    } catch (err) {
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω");
    } finally {
      setLoading(false);
    }
  };

  // –û—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
  const handleRevokeToken = async () => {
    try {
      setLoading(true);
      const res = await fetch("http://localhost:8080/api/v1/revoke", {
        method: "POST",
        credentials: "include",
      });
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞");

      toast.success("–¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω!");
      setHasApiToken(false);
      setRevealedToken(null);
    } catch (err) {
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω");
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å)
  const handleRevealToken = async () => {
    try {
      setLoading(true);
      const res = await fetch("http://localhost:8080/api/v1/token", {
        credentials: "include",
      });
      if (res.ok) {
        const data = await res.json();
        // –î–æ–ø—É—Å—Ç–∏–º, –±—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { "token": "eyJhbG..." }
        setRevealedToken(data.token);
      } else {
        toast.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
    } catch (err) {
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω");
    } finally {
      setLoading(false);
    }
  };

  // –°–∫—Ä—ã—Ç—å –≤–∏–¥–∏–º—ã–π —Ç–æ–∫–µ–Ω
  const handleHideToken = () => {
    setRevealedToken(null);
  };

  return (
    <div className="flex min-h-screen bg-gray-100">
      {/* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ª–µ–≤–∞ */}
      <aside className="w-64 bg-white border-r p-6">
        <h2 className="text-xl font-semibold">Account</h2>
        <p className="text-sm text-gray-500">Manage your account info.</p>
        <nav className="mt-4 space-y-2">
          <a
            href="/profile"
            className="flex items-center w-full px-3 py-2 text-sm font-medium text-gray-600 hover:bg-gray-100 rounded-lg"
          >
            <span className="mr-2">üë§</span> Profile
          </a>
          <a
            href="/security"
            className="flex items-center w-full px-3 py-2 text-sm font-medium text-gray-900 bg-gray-200 rounded-lg"
          >
            <span className="mr-2">üîí</span> Security
          </a>
        </nav>
      </aside>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç Security */}
      <div className="flex-1 p-8">
        <div className="max-w-2xl mx-auto">
          <Card className="bg-white shadow-md rounded-lg">
            <CardHeader className="p-6 border-b">
              <h3 className="text-lg font-bold">API Token</h3>
              <p className="text-sm text-gray-500 mt-1">
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –ª–∏—á–Ω—ã–º API-—Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—à–µ–π API.
              </p>
            </CardHeader>

            <CardContent className="p-6 space-y-4">
              {hasApiToken ? (
                <>
                  {revealedToken ? (
                    <div className="border rounded bg-gray-50 p-4">
                      <p className="text-sm text-gray-500 font-semibold mb-2">
                        –í–∞—à —Ç–µ–∫—É—â–∏–π API-—Ç–æ–∫–µ–Ω:
                      </p>
                      <p className="font-mono text-sm break-all text-gray-800">
                        {revealedToken}
                      </p>
                      <p className="text-sm text-gray-500 mt-2 font-semibold">
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω, –¥–æ–±–∞–≤–ª—è—è –∑–∞–≥–æ–ª–æ–≤–æ–∫:
                      </p>
                      <pre className="bg-gray-100 p-2 rounded text-xs whitespace-pre-wrap">
                        {`Authorization: Bearer ${revealedToken}`}
                      </pre>

                      <Button
                        // variant="secondary"
                        onClick={handleHideToken}
                        className="mt-3"
                      >
                        –°–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω
                      </Button>
                    </div>
                  ) : (
                    <p className="text-sm text-gray-600">
                      –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π API-—Ç–æ–∫–µ–Ω (—Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏).
                    </p>
                  )}

                  <Separator />

                  <div className="flex gap-2">
                    {!revealedToken && (
                      <Button onClick={handleRevealToken} disabled={loading}>
                        –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω
                      </Button>
                    )}
                    <Button
                      variant="destructive"
                      onClick={handleRevokeToken}
                      disabled={loading}
                    >
                      –û—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
                    </Button>
                  </div>
                </>
              ) : (
                <div className="flex flex-col space-y-3">
                  <p className="text-sm text-gray-600">
                    –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ API-—Ç–æ–∫–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã
                    —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.
                  </p>
                  <Button onClick={handleGenerateToken} disabled={loading}>
                    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
